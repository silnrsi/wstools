import os, json
import requests
import logging, re, unicodedata
from langtag import langtag, lookup
from sldr.utils import find_parents
import argparse
from sldr.ldml import Ldml, _alldrafts, getldml
import sys, traceback

parser = argparse.ArgumentParser()
parser.add_argument('scripts', type=str, help='Space-separated list in quotes of scripts you would like to search. Example: "Beng Deva Gujr Guru Knda Mlym Orya Taml Telu Thaa Sinh Limb Lepc Gong Gonm Sylo Saur"')
args = parser.parse_args()
inputscripts = [item for item in args.scripts.split(' ')]

def doit(scripts):

    ldml_files = os.path.join(os.path.dirname(os.path.dirname(__file__)), "local", "sldr")
    #currently searches the "local/sldr" directory generated by dbl2ldml in the wstools repo. Switch to find sldr? 

    filelist = []
    for (root, dirs, file) in os.walk(ldml_files):
        for f in file:
            if '.xml' in f:
                filelist.append(f)

    jsonoutput = []
    #cldr_missing = []

    for f in filelist:
        if f == "root.xml" or f == "test.xml":
            continue
        tag = f[:-4].replace("_", "-")
        filep = os.path.join(ldml_files, tag[0], f)
        if os.path.exists(filep):
            ldml = Ldml(filep)
        filename = os.path.basename(ldml.fname)
        lang = ldml.root.find('.//identity/language').get('type')
        script = ldml.root.find('.//identity/script')
        if script != None: 
            script = script.get('type')
        else: 
            i = ldml.root.find(".//identity/special/sil:identity", {v:k for k,v in ldml.namespaces.items()}) 
            script = i.get("script")
        if script not in scripts:
            #edit the above list however you need, maybe add an argparser for actually putting them in via command line later
            continue
        fonts = ldml.findall("special/sil:external-resources/sil:font")
        names = []
        for f in fonts:
            name = f.get("name", None)
            names.append(name)
        print(lang + " in " + script + " script uses " + str(names))

doit(inputscripts)

